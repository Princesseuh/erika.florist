---
import EleventyFetch from "@11ty/eleventy-fetch";
import { isICO, parseICO } from "icojs";
import { parseHTML } from "linkedom";
import sharp from "sharp";

interface Props {
	href: string;
}

const { href } = Astro.props;

let faviconUrl: string | undefined;

if (href.startsWith("http")) {
	faviconUrl = undefined;

	// Get favicon
	let html = "";

	try {
		html = await EleventyFetch(href, {
			duration: "1y",
			type: "text",
			directory: "node_modules/.cache3",
		});

		if (typeof html !== "string") {
			// @ts-ignore - There seems to be some bug in EleventyFetch and it doesn't return the text for some reason, weird.
			html = html.toString();
		}

		const { document } = parseHTML(html);
		const links = document.querySelectorAll("link");

		const faviconElement = Array.from(links).find((link) => {
			const rel = (link.getAttribute("rel") ?? "").toLowerCase();

			if (["icon", "shortcut icon"].includes(rel)) {
				const iconHref = link.getAttribute("href");

				if (iconHref) {
					return true;
				}
			}

			return false;
		});

		let originalFaviconUrl = new URL("/favicon.ico", href);
		if (faviconElement) {
			const faviconElementHref = faviconElement.getAttribute("href");
			if (faviconElementHref) originalFaviconUrl = new URL(faviconElementHref, href);
		}

		let faviconBuffer = (await EleventyFetch(originalFaviconUrl.toString(), {
			duration: "1y",
			type: "buffer",
			directory: "node_modules/.cache",
		})) as Buffer;

		if (isICO(faviconBuffer)) {
			const ico = await parseICO(faviconBuffer, "image/png");
			const largestIcon = ico.reduce((prev, current) =>
				prev.width > current.width ? prev : current,
			);
			faviconBuffer = Buffer.from(largestIcon.buffer);
		}

		const processedFavicon = await sharp(faviconBuffer)
			.toFormat("webp")
			.resize(32, 32)
			.toBuffer({ resolveWithObject: true });

		faviconUrl = `data:${processedFavicon.info.format};base64,${processedFavicon.data.toString("base64")}`;
	} catch (e) {
		if (e instanceof Error && Object.prototype.hasOwnProperty.call(e, "message")) {
			if (import.meta.env.DEV) console.log("favicon", e);
		}
	}
}

const content = (await Astro.slots.render("default")).trim();
---

{
	faviconUrl ? (
		<img
			class="relative top-[3px] mr-1 w-4 rounded-sm"
			src={faviconUrl.toString()}
			width="17"
			height="17"
			alt="Favicon"
			fetchpriority="low"
			loading="lazy"
			decoding="async"
			data-favicon
		/>
	) : (
		!href.startsWith("/") &&
		!href.startsWith("#") && (
			<span class="relative top-[3px] mr-1 inline-block w-4 rounded-sm" data-favicon-span="">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24">
					<path
						fill="none"
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M12 6H6a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-6m-7 1 9-9m-5 0h5v5"
					/>
				</svg>
			</span>
		)
	)
}

<a href={href}><Fragment set:html={content} /></a>
