---
export const partial = true;

import { blogFilter, getBaseSiteURL, getURLFromEntry } from "$utils";
import { getCollection } from "astro:content";

const articles = (await getCollection("blog")).filter(blogFilter).sort((a, b) => {
	return b.data.date.getTime() - a.data.date.getTime();
});

function makeIntro() {
	return `<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
      <channel>
        <title><![CDATA[Erika's blog]]></title>
        <link>${getBaseSiteURL()}articles</link>
        <description>My personal blog</description>
        <language>en</language>
        <image>
          <url>${getBaseSiteURL() + "social-card.png"}</url>
          <title>The logo of my blog, a white ribbon seen from the back.</title>
          <link>${getBaseSiteURL()}articles</link>
        </image>
        <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>
  `.trim();
}

function makeOutro() {
	return `
      </channel>
    </rss>
  `.trim();
}
---

<Fragment set:text={makeIntro()} />
{
	articles.map(async (article) => {
		const start = `\t<item>
      <title><![CDATA[${article.data.title}]]></title>
      <link>${getBaseSiteURL().slice(0, -1)}${getURLFromEntry(article)}</link>
      <description><![CDATA[${article.data.tagline}]]></description>
      <pubDate>${new Date(article.data.date).toUTCString()}</pubDate>
      <content:encoded><![CDATA[`.trim();
		const end = `]]></content:encoded>
    </item>\n`.trimStart();

		const { Content } = await article.render();

		return (
			<>
				<Fragment set:text={start} />
				<Content />
				<Fragment set:text={end} />
			</>
		);
	})
}
<Fragment set:text={makeOutro()} />
