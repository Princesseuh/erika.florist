---
import { versionHash } from "../../pages/catalogue/content.json";
import Skeleton from "./Skeleton.astro";
const pageLenth = 30;
---

<div id="catalogue-core" data-latest={versionHash}>
	<header class="flex flex-col justify-between gap-y-4 sm:flex-row sm:gap-y-0">
		<div
			id="catalogue-filters"
			class="flex flex-grow flex-col gap-x-4 gap-y-3 sm:flex-row sm:gap-y-0"
		>
			<div class="flex basis-5/12 flex-col">
				<label for="catalogue-search" class="mb-1">Search</label>
				<input
					id="catalogue-search"
					type="search"
					class="px-3 py-2 text-base sm:text-sm"
					placeholder="Search (title, author, etc.)"
				/>
			</div>

			<div class="flex flex-col">
				<label for="catalogue-types" class="mb-1">Type</label>
				<select
					name="types"
					id="catalogue-types"
					class="px-3 py-2 text-base focus:outline-none sm:min-h-min sm:text-sm"
				>
					<option value="">All Types</option>
					<option value="book">Book</option>
					<option value="game">Game</option>
					<option value="movie">Movie</option>
					<option value="show">Show</option>
				</select>
			</div>

			<div class="flex flex-col">
				<label for="catalogue-ratings" class="mb-1">Rating</label>
				<select name="ratings" id="catalogue-ratings" class="px-3 py-2 text-base sm:text-sm">
					<option value="">All Ratings</option>
					<option value="5">Masterpiece</option>
					<option value="4">Loved</option>
					<option value="3">Liked</option>
					<option value="2">Okay</option>
					<option value="1">Disliked</option>
					<option value="0">Hated</option>
				</select>
			</div>

			<div class="flex flex-col">
				<label for="catalogue-sort" class="mb-1 flex items-center justify-between gap-x-2">
					Sort
					<input
						id="catalogue-sort-ord"
						type="checkbox"
						class="m-0 cursor-pointer appearance-none text-lg before:text-white before:content-['↑'] checked:before:content-['↓'] sm:text-base"
					/>
				</label>
				<select
					name="sort"
					id="catalogue-sort"
					class="min-h-min px-3 py-2 text-base focus:outline-none sm:text-sm"
				>
					<option value="date">Date</option>
					<option value="rating">Rating</option>
					<option value="alphabetical">Title</option>
				</select>
			</div>
		</div>
		<div id="catalogue-entry-count" class="flex items-center justify-end sm:justify-start">
			<div
				class="ml-2 inline-block h-4 w-20 animate-pulse bg-dark-subtle-text dark:bg-dark-skeleton"
			>
			</div>
		</div>
	</header>
	<div id="catalogue-content" class="mt-4 flex flex-wrap gap-x-8 sm:gap-x-4">
		{Array.from({ length: pageLenth }).map(() => <Skeleton />)}
	</div>
</div>

<style>
	label {
		display: flex;
		font-size: 0.975rem;
		line-height: 1.5rem;
		font-weight: 550;
	}

	input[type="search"],
	select {
		height: 40px;
	}
</style>

<script>
	import { QuickScore } from "quick-score";

	const VERSION = 3;
	const latestHash = document
		.getElementById("catalogue-core")
		?.getAttribute("data-latest") as string;

	const dbOpenRequest = indexedDB.open("catalogue", VERSION);

	const searchInput = document.getElementById("catalogue-search") as HTMLInputElement;
	const ratingSelect = document.getElementById("catalogue-ratings") as HTMLSelectElement;
	const sortSelect = document.getElementById("catalogue-sort") as HTMLSelectElement;
	const sortOrderCheckbox = document.getElementById("catalogue-sort-ord") as HTMLInputElement;
	const typeSelect = document.getElementById("catalogue-types") as HTMLSelectElement;
	const content = document.getElementById("catalogue-content") as HTMLDivElement;
	const entriesCount = document.getElementById("catalogue-entry-count") as HTMLDivElement;

	let db: IDBDatabase;
	let allItems: CatalogueItemDB[] = [];
	let currentPage = 0;
	const pageSize = 30;
	let isLoading = false;

	dbOpenRequest.onerror = (event) => {
		console.error(
			"Failed to open database, resetting database..",
			(event.target as IDBOpenDBRequest).error,
		);

		const deleteRequest = indexedDB.deleteDatabase("catalogue");
		deleteRequest.onsuccess = () => {
			// Don't create a new request with the same variable name
			const newDbRequest = indexedDB.open("catalogue", VERSION);

			newDbRequest.onupgradeneeded = (event) => {
				db = (event.target as IDBOpenDBRequest).result;
				resetAndCreateDB();
			};
		};
		deleteRequest.onerror = (e) => {
			console.error("Failed to delete database", (e.target as IDBRequest).error);
		};
	};

	dbOpenRequest.onsuccess = () => {
		db = dbOpenRequest.result;

		// Check if database has data before building UI
		const transaction = db.transaction("content", "readonly");
		const objectStore = transaction.objectStore("content");

		// Check if database is empty first
		const countRequest = objectStore.count();
		countRequest.onsuccess = () => {
			if (countRequest.result > 0) {
				// Check version
				const versionCheck = objectStore.get("version");
				versionCheck.onsuccess = () => {
					if (!versionCheck.result || versionCheck.result.hash !== latestHash) {
						clearAndSeedDatabase();
					} else {
						buildUI();
					}
				};
				versionCheck.onerror = () => {
					clearAndSeedDatabase();
				};
			}
		};
	};

	dbOpenRequest.onupgradeneeded = (event) => {
		db = (event.target as IDBOpenDBRequest).result;

		resetAndCreateDB();
	};

	function clearAndSeedDatabase() {
		const transaction = db.transaction("content", "readwrite");
		const objectStore = transaction.objectStore("content");

		const clearRequest = objectStore.clear();
		clearRequest.onsuccess = () => {
			seedDatabase();
		};
		clearRequest.onerror = (e) => {
			console.error("Failed to clear database", e);
		};
	}

	function resetAndCreateDB() {
		// Only delete/create object stores during upgrade transactions
		if (db.objectStoreNames.contains("content")) {
			db.deleteObjectStore("content");
		}

		const objectStore = db.createObjectStore("content", {
			keyPath: "id",
		});

		objectStore.createIndex("date", "date", { unique: false });
		objectStore.createIndex("lower_case_title", "lower_case_title", { unique: false });
		objectStore.createIndex("rating_date", ["rating", "date"], { unique: false });

		objectStore.transaction.oncomplete = () => {
			seedDatabase();
		};
	}

	type CatalogueData = [number, CatalogueItem[]];

	type CatalogueItem = [
		string, // id
		string, // cover
		string, // placeholder
		number, // type
		string, // title
		number, // rating
		string, // author
		number?, // date
	];

	interface CatalogueItemDB {
		id: string;
		cover: string;
		placeholder: string;
		type: "game" | "movie" | "show" | "book";
		title: string;
		rating: number;
		author: string;
		date: number;
	}

	function numberToType(type: number): string {
		switch (type) {
			case 0:
				return "game";
			case 1:
				return "movie";
			case 2:
				return "show";
			case 3:
				return "book";
			default:
				throw new Error("Unknown type: " + type);
		}
	}

	const getRatingEmoji = (rating: number) => {
		switch (rating) {
			case 5:
				return "❤️";
			case 4:
				return "🥰";
			case 3:
				return "🙂";
			case 2:
				return "😐";
			case 1:
				return "😕";
			case 0:
				return "🙁";
			default:
				return "";
		}
	};

	async function seedDatabase() {
		const content = (await fetch("/catalogue/content.json").then((response) =>
			response.json(),
		)) as CatalogueData;

		const contentObjectStore = db.transaction("content", "readwrite").objectStore("content");
		const [version, data] = content;

		const versionRequest = contentObjectStore.add({
			id: "version",
			hash: version,
			timestamp: Date.now(),
		});

		versionRequest.onerror = (e) => {
			console.error("Failed to add version", (e.target as IDBRequest).error);
		};

		data.forEach((item) => {
			const [id, cover, placeholder, type, title, rating, author, date] = item;

			const itemType = numberToType(type);

			const addRequest = contentObjectStore.add({
				id: id + "-" + itemType,
				type: itemType,
				title: title,
				lower_case_title: title.toLowerCase(),
				rating: rating,
				date: date ?? 0,
				placeholder: placeholder,
				cover: cover,
				author: author,
			});

			addRequest.onerror = (e) => {
				console.error("Failed to add item", id, (e.target as IDBRequest).error);
			};
		});

		contentObjectStore.transaction.oncomplete = () => {
			buildUI();
		};
	}

	function buildUI() {
		if (isLoading) return;
		isLoading = true;

		const filters = {
			search: searchInput.value.toLowerCase(),
			type: typeSelect.value,
			rating: ratingSelect.value ? Number(ratingSelect.value) : "",
			sort: sortSelect.value,
		};

		const contentObjectStore = db.transaction("content", "readonly").objectStore("content");

		let request: IDBRequest;

		const cursorDirection = sortOrderCheckbox.checked ? "next" : "prev";

		// Use appropriate index for sorting
		if (filters.sort === "date") {
			const index = contentObjectStore.index("date");
			request = index.openCursor(null, cursorDirection);
		} else if (filters.sort === "rating") {
			const index = contentObjectStore.index("rating_date");
			request = index.openCursor(null, cursorDirection);
		} else if (filters.sort === "alphabetical") {
			const index = contentObjectStore.index("lower_case_title");
			request = index.openCursor(null, cursorDirection);
		} else {
			const index = contentObjectStore.index("date");
			request = index.openCursor(null, cursorDirection);
		}

		let items: CatalogueItemDB[] = [];

		request.onsuccess = (event) => {
			const cursor = (event.target as IDBRequest).result as IDBCursorWithValue;

			if (cursor) {
				const item = cursor.value;

				// Apply filters
				const matchesType = filters.type === "" || item.type === filters.type;
				const matchesRating = filters.rating === "" || item.rating === filters.rating;

				if (matchesType && matchesRating) {
					items.push(item);
				}

				cursor.continue();
			} else {
				// Apply search filter
				if (filters.search) {
					const qs = new QuickScore(items, {
						keys: ["title", "author"],
						minimumScore: 0.2,
						sortKey: "title",
					});
					const results = qs.search(filters.search);
					items = results.map((result) => result.item);
				}

				// Store filtered items for pagination
				allItems = items;
				currentPage = 0;

				// Clear content and render first page
				content.innerHTML = "";
				renderPage();
				updateEntryCount();

				isLoading = false;
				handleScroll(); // If the page is already scrolled down, render more items
			}
		};
	}

	function renderPage() {
		const startIndex = currentPage * pageSize;
		const endIndex = startIndex + pageSize;
		const pageItems = allItems.slice(startIndex, endIndex);

		if (pageItems.length === 0) {
			// No more items to render
			isLoading = false;
			content.innerHTML =
				'<p class="w-full text-center my-6">Nothing found. <a href="mailto:contact@erika.florist">Want to recommend me something?</a> </p>';
			return;
		}

		// Create a document fragment for better performance
		const fragment = document.createDocumentFragment();

		pageItems.forEach((item) => {
			const entry = document.createElement("div");
			entry.className = "w-[calc(50%-1rem)] sm:w-[calc(20%-1rem)]";
			entry.innerHTML = `
            <div class="relative">
                <img class="max-w-full h-auto aspect-[3/4.3] object-cover"
                     width="240" height="360"
                     src="${item.cover}"
                     loading="lazy"
                     style="background-size: cover;background-image: url(${item.placeholder});image-rendering:auto;"
                     onload="this.removeAttribute('style');this.removeAttribute('onload');"
                     decoding="async"
                     alt="${item.title} cover" />
                <span class="absolute top-0 right-0 pr-[0.15rem] pl-[0.2rem] bg-black/5 rounded-bl-lg select-none">
                    ${getRatingEmoji(item.rating)}
                </span>
            </div>
            <h4 class="m-0 leading-tight">
                ${item.title}
            </h4>
            <p class="text-sm">
                ${item.author}
            </p>
        `;
			fragment.appendChild(entry);
		});

		content.appendChild(fragment);
		currentPage++;
	}

	function updateEntryCount() {
		entriesCount.textContent = `${allItems.length} entries`;
	}

	function hasMorePages() {
		return currentPage * pageSize < allItems.length;
	}

	// Infinite scroll implementation
	function handleScroll() {
		if (isLoading || !hasMorePages()) return;

		const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
		const windowHeight = window.innerHeight;
		const documentHeight = document.documentElement.scrollHeight;

		// Trigger when user is 200px from bottom
		if (scrollTop + windowHeight >= documentHeight - 250) {
			renderPage();
		}
	}

	let ticking = false;
	document.addEventListener(
		"scroll",
		() => {
			if (!ticking) {
				window.requestAnimationFrame(() => {
					handleScroll();
					ticking = false;
				});

				ticking = true;
			}
		},
		{ passive: true },
	);

	// Reset pagination when filters change
	function resetAndBuildUI() {
		currentPage = 0;
		allItems = [];
		buildUI();
	}

	searchInput.addEventListener("input", resetAndBuildUI);
	ratingSelect.addEventListener("change", resetAndBuildUI);
	sortSelect.addEventListener("change", resetAndBuildUI);
	typeSelect.addEventListener("change", resetAndBuildUI);
	sortOrderCheckbox.addEventListener("change", resetAndBuildUI);
</script>
