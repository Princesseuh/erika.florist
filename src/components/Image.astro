---
import type { ImageMetadata, ImageOutputFormat } from "astro";
import type { HTMLAttributes } from "astro/types";
import {
	Picture as AstroPicture,
	getConfiguredImageService,
	type LocalImageProps,
} from "astro:assets";
import type { LocalImageServiceWithPlaceholder } from "src/imageService";

export type Props = Omit<LocalImageProps, "src"> & {
	src: ImageMetadata;
	formats?: ImageOutputFormat[];
	fallbackFormat?: ImageOutputFormat | undefined;
	pictureAttributes?: HTMLAttributes<"picture"> | undefined;
};

const imageService = (await getConfiguredImageService()) as LocalImageServiceWithPlaceholder;
const placeholderURL = await imageService.generatePlaceholder(
	Astro.props.src,
	Astro.props.src.width,
	Astro.props.src.height,
);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const { ...props } = Astro.props as any;
---

<AstroPicture
	{...props}
	width={Astro.props.width ?? Astro.props.src.width / 2}
	densities={Astro.props.densities ?? [1.5, 2]}
	formats={Astro.props.formats ?? ["avif", "webp"]}
	style={`background-size: cover;background-image: url(${placeholderURL});image-rendering:auto;`}
	onload="this.style.backgroundSize = null; this.style.backgroundImage = null; this.style.imageRendering = null; this.removeAttribute('onload');"
/>
