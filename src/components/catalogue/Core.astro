---
import Skeleton from "./Skeleton.astro";
const pageLenth = 30;
---

<div id="catalogue-core" data-pagelength={pageLenth}>
	<header class="">
		<div id="catalogue-filters" class="">
			<div>
				<label for="catalogue-search">Search</label>
				<input id="catalogue-search" type={"search"} />
			</div>

			<div>
				<label for="catalogue-types">Type</label>
				<select name="types" id="catalogue-types">
					<option value="">Type</option>
					<option value="book">Book</option>
					<option value="game">Game</option>
					<option value="movie">Movie</option>
					<option value="show">Show</option>
				</select>
			</div>

			<div>
				<label for="catalogue-ratings">Rating</label>
				<select name="ratings" id="catalogue-ratings">
					<option value="">Rating</option>
					<option value="masterpiece">Masterpiece</option>
					<option value="loved">Loved</option>
					<option value="liked">Liked</option>
					<option value="okay">Okay</option>
					<option value="disliked">Disliked</option>
					<option value="hated">Hated</option>
				</select>
			</div>

			<div>
				<label for="catalogue-sort">Sort</label>
				<select name="sort" id="catalogue-sort">
					<option value="date">Date</option>
					<option value="rating">Rating</option>
					<option value="alphabetical">Title</option>
				</select>
			</div>
		</div>
		<div id="catalogue-entry-count" class="">... entries</div>
	</header>
	<div id="catalogue-content" class="">
		{Array.from({ length: pageLenth }).map(() => <Skeleton />)}
	</div>
	<div class="">
		<button id="catalogue-seemore" class="">Load more</button>
	</div>
</div>

<style>
	label {
		display: block;
		font-size: 0.875rem;
		line-height: 1.5rem;
		font-weight: 550;
	}
</style>

<script>
	const searchInput = document.getElementById("catalogue-search") as HTMLInputElement;
	const ratingSelect = document.getElementById("catalogue-ratings") as HTMLSelectElement;
	const sortSelect = document.getElementById("catalogue-sort") as HTMLSelectElement;
	const typeSelect = document.getElementById("catalogue-types") as HTMLSelectElement;
	const seeMoreButton = document.getElementById("catalogue-seemore") as HTMLButtonElement;
	const content = document.getElementById("catalogue-content") as HTMLDivElement;

	interface Status {
		totalItems: number;
		itemsPerPage: number;
		currentPage: number;
		currentOffset: number;
		totalPages: number;
	}

	let serverStatus: Status;
	let _currentPage = 1;

	function updateCurrentPage(value: number) {
		_currentPage = value;
	}

	function updateSeeMoreButton() {
		seeMoreButton.disabled = _currentPage === serverStatus.totalPages;
	}

	let searchDebounce: ReturnType<typeof setTimeout>;
	searchInput.addEventListener("input", async () => {
		clearTimeout(searchDebounce);
		searchDebounce = setTimeout(async () => {
			updateCurrentPage(1);
			await buildLibrary();
			updateSeeMoreButton();
		}, 75);
	});

	[ratingSelect, typeSelect, sortSelect].forEach((select) => {
		select.addEventListener("change", async () => {
			updateCurrentPage(1);
			await buildLibrary();
			updateSeeMoreButton();
		});
	});

	seeMoreButton.addEventListener("click", async () => {
		updateCurrentPage(_currentPage + 1);
		await buildLibrary(true);
		updateSeeMoreButton();
	});

	await buildLibrary();

	async function buildLibrary(append = false) {
		const entryCount = document.getElementById("catalogue-entry-count") as HTMLDivElement;
		const url = buildQueryParams(new URL("/api/catalogue", "http://dummy"));
		const data = await fetch(url.pathname + url.search)
			.then((response) => response.text())
			.catch((err) => {
				content.innerHTML =
					"Could not build library! If this still happens after refreshing, please create an issue or reach me on any platforms you can find.";
				throw new Error(`Couldn't build library ${err}`);
			});

		const [currentStatus, library] = data.split("!METAEND") as [string, string];
		serverStatus = JSON.parse(currentStatus);

		if (append) {
			content.innerHTML += library;
		} else {
			content.innerHTML = library;
		}

		entryCount.innerText = `${Math.min(
			serverStatus.currentOffset + serverStatus.itemsPerPage,
			serverStatus.totalItems,
		)}/${serverStatus.totalItems} entries`;
	}

	function buildQueryParams(url: URL): URL {
		url.searchParams.append("search", searchInput.value);
		url.searchParams.append("type", typeSelect.value);
		url.searchParams.append("rating", ratingSelect.value);
		url.searchParams.append("sort", sortSelect.value);
		url.searchParams.append("page", _currentPage.toString());

		return url;
	}
</script>
